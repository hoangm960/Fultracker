---
import { app } from "@lib/firebase/server";
import { getAuth } from "firebase-admin/auth";
import AuthLayout from "@layouts/AuthLayout.astro";

import SignOptionBtn from "@components/SignOptionBtn.astro";
import googleIcon from "@assets/icons/google.png";
import githubIcon from "@assets/icons/github.png";
import InputField from "@components/InputField.astro";

/* Check if the user is authenticated */
const auth = getAuth(app);
const sessionCookie = Astro.cookies.get("session").value;
if (sessionCookie) {
	const decodedCookie = await auth.verifySessionCookie(sessionCookie);
	if (decodedCookie) {
		return Astro.redirect("/");
	}
}
---

<AuthLayout action="signin" title="Login">
	<InputField name="Email" , type="email" slot="input"/>
	<InputField name="Password" , type="password" slot="input"/>

	<div class="relative w-full h-[2%] mt-5" slot="otherSignInOption">
		<div class="w-full h-4/5 bg-dark-secondary"></div>
		<div
			class="absolute w-fit top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-dark-brown px-2 text-dark-primary text-center text-2xl font-bold"
		>
			or
		</div>
	</div>
	<div
		class="flex justify-evenly mt-7 w-full h-[10%]"
		slot="otherSignInOption"
	>
		<SignOptionBtn
			id="google"
			title="Google"
			icon={googleIcon}
			backgroundColor="#1639B6"
		/>
		<SignOptionBtn
			id="github"
			title="Github"
			icon={githubIcon}
			backgroundColor="#707070"
		/>
	</div>
</AuthLayout>

<script>
	import {
		getAuth,
		inMemoryPersistence,
		signInWithEmailAndPassword,
		GoogleAuthProvider,
		signInWithPopup,
		GithubAuthProvider,
	} from "firebase/auth";
	import { app } from "@lib/firebase/client";

	const auth = getAuth(app);
	auth.setPersistence(inMemoryPersistence);

	const form = document.querySelector("form") as HTMLFormElement;
	form.addEventListener("submit", async (e) => {
		e.preventDefault();
		const formData = new FormData(form);
		const email = formData.get("email")?.toString();
		const password = formData.get("password")?.toString();

		if (!email || !password) {
			return;
		}
		const userCredential = await signInWithEmailAndPassword(
			auth,
			email,
			password
		);
		const idToken = await userCredential.user.getIdToken();
		const response = await fetch("/api/auth/signin", {
			headers: {
				Authorization: `Bearer ${idToken}`,
			},
		});

		if (response.redirected) {
			window.location.assign(response.url);
		}
	});

	const googleSignin = document.querySelector("#google") as HTMLButtonElement;
	googleSignin.addEventListener("click", async () => {
		const provider = new GoogleAuthProvider();
		const userCredential = await signInWithPopup(auth, provider);
		const idToken = await userCredential.user.getIdToken();
		const res = await fetch("/api/auth/signin", {
			headers: {
				Authorization: `Bearer ${idToken}`,
			},
		});

		if (!res.ok) {
			const data = await res.json();
			console.log(data);
		}

		if (res.redirected) {
			window.location.assign(res.url);
		}
	});

	const githubSignin = document.querySelector("#github") as HTMLButtonElement;
	githubSignin.addEventListener("click", async () => {
		const provider = new GithubAuthProvider();
		const userCredential = await signInWithPopup(auth, provider);
		const idToken = await userCredential.user.getIdToken();
		console.log(idToken);
		const res = await fetch("/api/auth/signin", {
			headers: {
				Authorization: `Bearer ${idToken}`,
			},
		});

		if (!res.ok) {
			const data = await res.json();
			console.log(data);
		}

		if (res.redirected) {
			window.location.assign(res.url);
		}
	});
</script>
