---
import { app } from "@lib/firebase/server";
import { getAuth } from "firebase-admin/auth";
import DashboardLayout from "@layouts/DashboardLayout.astro";
import InfoField from "@components/InfoField.astro";
import CourseTable from "@components/table/CourseTable.astro";
import Button from "@components/Button.astro";

import EditIcon from "@assets/icons/Edit.svg";
import DeleteIcon from "@assets/icons/delete.png";
import SaveIcon from "@assets/icons/save.png";
import CancelIcon from "@assets/icons/cancel.png";
import MajorDropdown from "@components/MajorDropdown.astro";
import CourseRow from "@components/table/CourseRow.astro";
import { getFirestore } from "firebase-admin/firestore";

const auth = getAuth(app);

/* Check current session */
const sessionCookie = Astro.cookies.get("session").value;

if (!sessionCookie) {
	return Astro.redirect("/signin");
}
const decodedCookie = await auth.verifySessionCookie(sessionCookie);
const user = await auth.getUser(decodedCookie.uid);

if (!user) {
	return Astro.redirect("/signin");
}

import data from "@data/data.json";
---

<DashboardLayout page="home">
	<div
		class="p-2.5 flex flex-row gap-2.5 items-start justify-start self-stretch flex-1 relative"
	>
		<div
			class="flex flex-col gap-2.5 items-start justify-start self-stretch flex-1 relative"
		>
			<main
				class="bg-highlight rounded-[10px] flex flex-col gap-0 items-start justify-start self-stretch flex-1 pb-2 px-4 relative"
			>
				<div
					class="pt-2.5 pb-2.5 flex flex-row gap-5 items-start justify-start flex-wrap self-stretch shrink-0"
				>
					<InfoField title="Name:" value="Student's Name" isEditable>
						<Button
							classes="editInfo"
							theme="neutral"
							padding="p-1"
						>
							<img class="h-8" src={EditIcon} alt="editInfo" />
						</Button>
					</InfoField>
					<InfoField title="Student ID:" value="xxxxxx" isEditable>
						<Button
							classes="editInfo"
							theme="neutral"
							padding="p-1"
						>
							<img class="h-8" src={EditIcon} alt="editInfo" />
						</Button>
					</InfoField>
					<InfoField title="DOB:" value="xx/xx/xxxx" isEditable>
						<Button
							classes="editInfo"
							theme="neutral"
							padding="p-1"
						>
							<img class="h-8" src={EditIcon} alt="editInfo" />
						</Button>
					</InfoField>
					<InfoField title="Major:" value="Major Name" isEditable>
						<Button
							classes="editInfo"
							theme="neutral"
							padding="p-1"
						>
							<img class="h-8" src={EditIcon} alt="editInfo" />
						</Button>
					</InfoField>
					<InfoField
						title="Double Major:"
						value="Major Name"
						isEditable
					>
						<Button
							classes="editInfo"
							theme="neutral"
							padding="p-1"
						>
							<img class="h-8" src={EditIcon} alt="editInfo" />
						</Button>
					</InfoField>
					<InfoField
						title="Minor(s)"
						value="Minor Name, Minor Name"
						isEditable
					>
						<Button
							classes="editInfo"
							theme="neutral"
							padding="p-1"
						>
							<img class="h-8" src={EditIcon} alt="editInfo" />
						</Button>
					</InfoField>
				</div>
				<CourseTable height={386}>
					{
						[...Array(40).keys()].map((num) => (
							<CourseRow classes="courseRow" num={num + 1}>
								<div class="flex flex-row gap-5">
									<Button
										classes="editCourse"
										theme="neutral"
										padding="p-1"
									>
										<img
											class="h-8"
											src={EditIcon}
											alt="Edit Course"
										/>
									</Button>
									<Button
										classes="deleteCourse"
										theme="neutral"
										padding="p-1"
									>
										<img
											class="h-8"
											src={DeleteIcon}
											alt="Delete Course"
										/>
									</Button>
								</div>
							</CourseRow>
						))
					}
				</CourseTable>
			</main>

			<footer
				class="bg-highlight rounded-[10px] pt-[30px] pr-2.5 pb-[30px] pl-2.5 flex flex-row gap-0 items-start justify-start flex-wrap shrink-0 self-stretch"
			>
				<div
					class="flex flex-col gap-2.5 items-start justify-start flex-1 relative"
				>
					<InfoField
						title="Overall Credits:"
						value="32"
						total={128}
					/>
					<InfoField title="Major Credits:" value="16" total={128} />
					<InfoField title="Core Courses:" value="4" total={5} />
					<InfoField title="GPA:" value="2.5" total={4} />
				</div>
				<div
					class="border-solid border-text border-l flex flex-col gap-2.5 items-start justify-start flex-1 relative"
				>
					<InfoField
						title="E1 (Arts and Humanities):"
						value="0"
						total={2}
					/>
					<InfoField
						title="E2 (Social Sciences):"
						value="1"
						total={2}
					/>
					<InfoField
						title="E3 (Sciences and Engineering):"
						value="3"
						total={2}
					/>
					<InfoField
						title="E4 (Mathematics and Computing):"
						value="3"
						total={2}
					/>
				</div>
			</footer>
		</div>

		<side
			class="bg-highlight rounded-[10px] pt-[15px] pr-5 pb-[15px] pl-5 flex flex-col gap-5 items-start justify-start self-stretch shrink-0 w-1/3"
			style="overflow-y: auto"
		>
			<MajorDropdown />
			<div class="text-text text-left relative font-bold text-2xl">
				Requirements:
			</div>
			<InfoField title="Title:" value="Value" total={8} hasProgressBar />
			<InfoField title="Title:" value="Value" total={8} hasProgressBar />
			<InfoField title="Title:" value="Value" total={8} hasProgressBar />
			<InfoField title="Title:" value="Value" total={8} hasProgressBar />
			<InfoField title="Title:" value="Value" total={8} hasProgressBar />
			<InfoField title="Title:" value="Value" total={8} hasProgressBar />
			<InfoField title="Title:" value="Value" total={8} hasProgressBar />
		</side>
	</div>
</DashboardLayout>

<script define:vars={{ EditIcon, SaveIcon, CancelIcon, DeleteIcon, data }}>
var editInfoBtns = document.getElementsByClassName("editInfo");
var editableValues = document.getElementsByClassName("editableValue");
for (let i = 0; i < editInfoBtns.length; i++) {
	editInfoBtns[i].addEventListener("click", (e) => {
		const icon = e.target;
		if (editableValues[i].contentEditable == "true") {
			icon.src = EditIcon;
			editableValues[i].contentEditable = "false";
		} else {
			icon.src = SaveIcon;
			editableValues[i].contentEditable = "true";
			editableValues[i].focus();
		}
	});
}

var termValue = document.getElementsByClassName("term");
var codeValue = document.getElementsByClassName("code");
var titleValue = document.getElementsByClassName("title");
var gradeValue = document.getElementsByClassName("grade");

var editCourseBtns = document.getElementsByClassName("editCourse");
var deleteCourseBtns = document.getElementsByClassName("deleteCourse");

var clickChecks = [];
for (let i = 0; i < editCourseBtns.length; i++) {
	function deleteCourse(e) {
		termValue[i].textContent = "Term";
		codeValue[i].textContent = "Course Code";
		titleValue[i].textContent = "Course Name";
		gradeValue[i].textContent = "Grade";
	}

	deleteCourseBtns[i].addEventListener("click", deleteCourse);

	clickChecks.push(false);
	editCourseBtns[i].addEventListener("click", (e) => {
		const editIcon = e.currentTarget.getElementsByTagName("img")[0];
		const delIcon = deleteCourseBtns[i].getElementsByTagName("img")[0];
		if (clickChecks[i]) {
			clickChecks[i] = false;
			editIcon.src = EditIcon;
			delIcon.src = DeleteIcon;
			deleteCourseBtns[i].addEventListener("click", deleteCourse);

			var termSelect = termValue[i].getElementsByTagName("select")[0];
			termValue[i].removeChild(termSelect);
			termValue[i].textContent =
				termSelect.value == "Term"
					? termSelect.value
					: termSelect.value.split("_").slice(1, 3).join(" ");
			var codeSelect = codeValue[i].getElementsByTagName("select")[0];
			if (codeSelect) {
				codeValue[i].removeChild(codeSelect);
				codeValue[i].textContent = codeSelect.value;
			}
			var gradeSelect =
				gradeValue[i].getElementsByTagName("select")[0];
			if (gradeSelect) {
				gradeValue[i].removeChild(gradeSelect);
				gradeValue[i].textContent = gradeSelect.value;
			}
		} else {
			clickChecks[i] = true;
			currentValue = {
				term: termValue[i].textContent,
				code: codeValue[i].textContent,
				title: titleValue[i].textContent,
				grade: gradeValue[i].textContent,
			};

			function cancelEdit(e) {
				termValue[i].textContent = currentValue["term"];
				codeValue[i].textContent = currentValue["code"];
				titleValue[i].textContent = currentValue["title"];
				gradeValue[i].textContent = currentValue["grade"];

				clickChecks[i] = false;
				editIcon.src = EditIcon;

				delIcon.src = DeleteIcon;
				deleteCourseBtns[i].addEventListener("click", deleteCourse);
			}

			function getCodeSelect(courses) {
				codeOptions = "";
				Object.keys(courses).forEach((code) => {
					optionHTML = `<option ${codeValue[i].textContent == code && "selected"
						} value=${code}>${code}</option>`;
					codeOptions = codeOptions + optionHTML + "\n";
				});
				codeSelect = document.createElement("select");
				codeSelect.innerHTML =
					'<option value="Course Code" disabled selected hidden> Choose a course code ...</option>\n' +
					codeOptions;
				codeValue[i].textContent = "";
				codeValue[i].appendChild(codeSelect);

				codeSelect.addEventListener("change", () => {
					titleValue[i].textContent =
						courses[codeSelect.value].name;
					getGradeSelect();
				});
			}

			function getGradeSelect() {
				var grades = [
					"A",
					"A-",
					"B+",
					"B",
					"B-",
					"C+",
					"C",
					"C-",
					"D+",
					"D",
					"F",
				];
				gradeOptions = "";
				grades.forEach((grade) => {
					optionHTML = `<option ${gradeValue[i].textContent == grade && "selected"
						} value=${grade}>${grade}</option>`;
					gradeOptions = gradeOptions + optionHTML + "\n";
				});
				var gradeSelect = document.createElement("select");
				gradeSelect.innerHTML = gradeOptions;
				gradeValue[i].textContent = "";
				gradeValue[i].appendChild(gradeSelect);
			}

			editIcon.src = SaveIcon;
			termValue[i].focus();
			termOptions = "";
			var haveSelected = false;
			Object.keys(data).forEach((term) => {
				termName = term.split("_").slice(1, 3).join(" ");
				isTermSelected = termValue[i].textContent == termName;
				optionHTML = `<option ${isTermSelected && "selected"
					} value=${term}>${termName}</option>`;
				termOptions = termOptions + optionHTML + "\n";
				if (isTermSelected) {
					haveSelected = true;
				}
			});
			termSelect = document.createElement("select");
			termSelect.innerHTML =
				'<option value="Term" disabled selected hidden> Choose a major ...</option>\n' +
				termOptions;
			termValue[i].textContent = "";
			termValue[i].appendChild(termSelect);
			if (haveSelected) {
				getCodeSelect(data[termSelect.value]);
				getGradeSelect();
			}

			termSelect.addEventListener("change", () =>
				getCodeSelect(data[termSelect.value])
			);

			delIcon.src = CancelIcon;
			deleteCourseBtns[i].removeEventListener("click", deleteCourse);
				deleteCourseBtns[i].addEventListener("click", cancelEdit);
			}
		});
	}
</script>
