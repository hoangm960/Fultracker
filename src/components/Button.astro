---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"button"> {
  type?: "button" | "submit";
  isfilled?: boolean;
  theme?: "action" | "destructive" | "neutral" | "disable";
  classes?: string;
  padding?: string;
}

const {
  type = "button",
  isfilled,
  theme = "action",
  classes,
  padding = "pt-[18px] pr-5 pb-[18px] pl-5",
  ...rest
} = Astro.props;
const themeDict = {
  action: ["action", "highlight", "dark-action"],
  neutral: ["highlight", "text", "active-light"],
  destructive: ["destructive", "text", "light-red"],
  disable: ["text", "highlight", "dark-text"],
};
const themeBG = `var(--${themeDict[theme][0]})`;
const themeFG = `var(--${themeDict[theme][1]})`;
const clickBG = `var(--${themeDict[theme][2]})`;
---

<button
  class:list={[
    classes,
    { filled: isfilled },
    padding,
    "h-fit rounded-2xl flex flex-row gap-5 items-center justify-center hover:shadow-2xl hover:opacity-80 min-w-fit",
  ]}
  {type}
  {...rest}
>
  <slot />
</button>

<style define:vars={{ themeBG, themeFG, clickBG }}>
  button {
    font: inherit;
    cursor: pointer;

    --bkg: var(--themeBG);
    --color: var(--themeFG);

    color: var(--bkg) !important;
    border: 3px solid var(--bkg);
    transition: box-shadow 0.2s cubic-bezier(0.075, 0.82, 0.165, 1),
      opacity 0.2s cubic-bezier(0.075, 0.82, 0.165, 1),
      scale 0.2s cubic-bezier(0.075, 0.82, 0.165, 1);
  }

  button.filled {
    background-color: var(--bkg) !important;
    color: var(--color) !important;
    border: 3px solid var(--text);
  }

  button:active {
    background-color: var(--clickBG) !important;
  }
</style>
